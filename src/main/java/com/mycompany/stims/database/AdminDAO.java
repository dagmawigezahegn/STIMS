package com.mycompany.stims.database;

import com.mycompany.stims.model.Admin;
import com.mycompany.stims.utils.PasswordUtils;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;

import java.security.SecureRandom;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * The `AdminDAO` class provides data access operations for the `Admin` entity.
 * It handles database interactions such as adding, updating, deleting, and
 * retrieving admin records. This class also includes utility methods for
 * generating unique admin IDs, usernames, and temporary passwords.
 */
public class AdminDAO {

    private Connection connection;
    private static final String TEMP_PASSWORD_FILE = "temporary_passwords_admins.txt";

    /**
     * Constructs an `AdminDAO` object with a database connection.
     *
     * @param connection The database connection to be used for operations.
     */
    public AdminDAO(Connection connection) {
        this.connection = connection;
    }

    /**
     * Generates a unique admin ID number in the format "ID/ADM/XXX". The ID is
     * generated by incrementing the last used admin ID number.
     *
     * @return A unique admin ID number as a String.
     */
    private String generateAdminIdNo() {
        String prefix = "ID/ADM/";
        String sql = "SELECT adminId_No FROM Admin ORDER BY adminId_No DESC LIMIT 1";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            if (rs.next()) {
                String lastAdminIdNo = rs.getString("adminId_No");
                int newIdNum = Integer.parseInt(lastAdminIdNo.split("/")[2]) + 1;
                return prefix + String.format("%03d", newIdNum);
            }
        } catch (SQLException e) {
            System.err.println("Error generating adminId_No: " + e.getMessage());
        }
        return prefix + "001";
    }

    /**
     * Generates a unique username based on the admin's first and last name. If
     * the base username already exists, a numeric suffix is appended to make it
     * unique.
     *
     * @param firstName The admin's first name.
     * @param lastName The admin's last name.
     * @return A unique username as a String.
     */
    private String generateUsername(String firstName, String lastName) {
        String baseUsername = firstName.toLowerCase() + "." + lastName.toLowerCase();
        String username = baseUsername;
        int count = 1;

        // Check if the username already exists
        while (usernameExists(username)) {
            username = baseUsername + count;
            count++;
        }
        return username;
    }

    /**
     * Checks if a username already exists in the database.
     *
     * @param username The username to check.
     * @return `true` if the username exists, `false` otherwise.
     */
    private boolean usernameExists(String username) {
        String sql = "SELECT COUNT(*) AS count FROM Admin WHERE username = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, username);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("count") > 0;
            }
        } catch (SQLException e) {
            System.err.println("Error checking username: " + e.getMessage());
        }
        return false;
    }

    /**
     * Generates a temporary password consisting of random alphanumeric and
     * special characters.
     *
     * @return A temporary password as a String.
     */
    private String generateTemporaryPassword() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
        SecureRandom random = new SecureRandom();
        StringBuilder password = new StringBuilder();

        for (int i = 0; i < 12; i++) {
            password.append(characters.charAt(random.nextInt(characters.length())));
        }
        return password.toString();
    }

    /**
     * Saves the temporary password to a file for reference.
     *
     * @param adminIdNo The admin ID number associated with the temporary
     * password.
     * @param temporaryPassword The temporary password to save.
     */
    private void saveTemporaryPasswordToFile(String adminIdNo, String temporaryPassword) {
        Path path = Paths.get(TEMP_PASSWORD_FILE);
        try (BufferedWriter writer = Files.newBufferedWriter(path, StandardOpenOption.CREATE, StandardOpenOption.APPEND)) {
            writer.write("Admin ID: " + adminIdNo + ", Temporary Password: " + temporaryPassword);
            writer.newLine();
        } catch (IOException e) {
            System.err.println("Error saving temporary password to file: " + e.getMessage());
        }
    }

    /**
     * Adds a new admin to the database and returns the temporary password.
     *
     * @param admin The `Admin` object containing admin details.
     * @return The temporary password as a String, or `null` if the operation
     * fails.
     */
    public String addAdmin(Admin admin) {
        // Generate a username if not provided
        if (admin.getUsername() == null || admin.getUsername().isEmpty()) {
            String username = generateUsername(admin.getFirstName(), admin.getLastName());
            admin.setUsername(username);
        }

        // Generate a temporary password
        String temporaryPassword = generateTemporaryPassword();
        admin.setPasswordHash(temporaryPassword);

        // Hash the temporary password
        String hashedPassword = PasswordUtils.hashPassword(temporaryPassword);
        admin.setPasswordHash(hashedPassword);

        // Generate an admin ID No
        admin.setAdminIdNo(generateAdminIdNo());

        String sql = "INSERT INTO Admin (adminId_No, username, password_hash, first_name, middle_name, last_name, sex, date_of_birth, email, phone_number, address, role_id, last_login) "
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, admin.getAdminIdNo());
            pstmt.setString(2, admin.getUsername());
            pstmt.setString(3, hashedPassword);
            pstmt.setString(4, admin.getFirstName());
            pstmt.setString(5, admin.getMiddleName());
            pstmt.setString(6, admin.getLastName());
            pstmt.setString(7, admin.getSex());
            pstmt.setDate(8, new java.sql.Date(admin.getDateOfBirth().getTime()));
            pstmt.setString(9, admin.getEmail());
            pstmt.setString(10, admin.getPhoneNumber());
            pstmt.setString(11, admin.getAddress());
            pstmt.setInt(12, admin.getRoleId());
            pstmt.setTimestamp(13, admin.getLastLogin() != null ? new Timestamp(admin.getLastLogin().getTime()) : null);
            pstmt.executeUpdate();

            System.out.println("Admin added successfully with AdminIdNo: " + admin.getAdminIdNo());
            System.out.println("Temporary Password: " + temporaryPassword); // Log the temporary password
            saveTemporaryPasswordToFile(admin.getAdminIdNo(), temporaryPassword);// Saves the temporary password

            // Return the temporary password
            return temporaryPassword;
        } catch (SQLException e) {
            System.err.println("Error adding admin: " + e.getMessage());
            return null; // Return null if there's an error
        }
    }

    /**
     * Authenticates an admin using their email or username and password.
     *
     * @param emailOrUsername The email or username of the admin.
     * @param plainPassword The plain-text password to authenticate.
     * @return The authenticated `Admin` object, or `null` if authentication
     * fails.
     */
    public Admin authenticateAdmin(String emailOrUsername, String plainPassword) {
        String sql = "SELECT * FROM Admin WHERE username = ? OR email = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, emailOrUsername);
            pstmt.setString(2, emailOrUsername);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    String storedHashedPassword = rs.getString("password_hash");
                    if (PasswordUtils.checkPassword(plainPassword, storedHashedPassword)) {
                        Admin admin = mapRowToAdmin(rs);
                        admin.setRoleId(rs.getInt("role_id"));
                        return admin;
                    }
                }
            }
        } catch (SQLException e) {
            System.err.println("Error authenticating admin: " + e.getMessage());
        }
        return null; // Authentication failed
    }

    /**
     * Retrieves an admin by their admin ID number.
     *
     * @param adminIdNo The admin ID number to search for.
     * @return The `Admin` object, or `null` if not found.
     */
    public Admin getAdminByIdNo(String adminIdNo) {
        String sql = "SELECT * FROM Admin WHERE adminId_No = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, adminIdNo);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return mapRowToAdmin(rs);
            }
        } catch (SQLException e) {
            throw new RuntimeException("Error retrieving admin: " + e.getMessage(), e);
        }
        return null;
    }

    /**
     * Retrieves an admin by their email or username.
     *
     * @param emailOrUsername The email or username to search for.
     * @return The `Admin` object, or `null` if not found.
     */
    public Admin getAdminByEmailOrUsername(String emailOrUsername) {
        String sql = "SELECT * FROM Admin WHERE email = ? OR username = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, emailOrUsername);
            pstmt.setString(2, emailOrUsername);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return mapRowToAdmin(rs);
            }
        } catch (SQLException e) {
            System.err.println("Error fetching admin by email/username: " + e.getMessage());
        }
        return null;
    }

    /**
     * Retrieves the role name associated with a role ID.
     *
     * @param roleId The role ID to search for.
     * @return The role name as a String, or `null` if not found.
     */
    public String getRoleNameById(int roleId) {
        String roleName = null;
        String query = "SELECT role_name FROM role WHERE role_id = ?";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, roleId);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                roleName = resultSet.getString("role_name");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception (e.g., log it or show an error message)
        }

        return roleName;
    }

    /**
     * Retrieves a list of all admins in the database.
     *
     * @return A list of `Admin` objects.
     */
    public List<Admin> getAllAdmins() {
        List<Admin> admins = new ArrayList<>();
        String sql = "SELECT * FROM Admin";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                admins.add(mapRowToAdmin(rs));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving all admins: " + e.getMessage());
        }
        return admins;
    }

    /**
     * Updates the details of an existing admin in the database.
     *
     * @param admin The `Admin` object containing updated details.
     */
    public void updateAdmin(Admin admin) {
        String sql = "UPDATE Admin SET username = ?, first_name = ?, middle_name = ?, last_name = ?, sex = ?, date_of_birth = ?, email = ?, phone_number = ?, address = ?, role_id = ?, last_login = ?, updated_at = CURRENT_TIMESTAMP WHERE adminId_No = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, admin.getUsername());
            pstmt.setString(2, admin.getFirstName());
            pstmt.setString(3, admin.getMiddleName());
            pstmt.setString(4, admin.getLastName());
            pstmt.setString(5, admin.getSex());
            pstmt.setDate(6, new java.sql.Date(admin.getDateOfBirth().getTime()));
            pstmt.setString(7, admin.getEmail());
            pstmt.setString(8, admin.getPhoneNumber());
            pstmt.setString(9, admin.getAddress());
            pstmt.setInt(10, admin.getRoleId());
            pstmt.setTimestamp(11, admin.getLastLogin() != null ? new Timestamp(admin.getLastLogin().getTime()) : null); // Corrected index
            pstmt.setString(12, admin.getAdminIdNo());
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.err.println("Error updating admin: " + e.getMessage());
        }
    }

    /**
     * Deletes an admin from the database by their admin ID number.
     *
     * @param adminIdNo The admin ID number of the admin to delete.
     */
    public void deleteAdmin(String adminIdNo) {
        String sql = "DELETE FROM Admin WHERE adminId_No = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, adminIdNo);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.err.println("Error deleting admin: " + e.getMessage());
        }
    }

    /**
     * Changes the password for an admin.
     *
     * @param adminIdNo The admin ID number of the admin.
     * @param newPassword The new password to set.
     */
    public void changePassword(String adminIdNo, String newPassword) {
        String hashedPassword = PasswordUtils.hashPassword(newPassword);
        String sql = "UPDATE Admin SET password_hash = ?, updated_at = CURRENT_TIMESTAMP WHERE adminId_No = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, hashedPassword);
            pstmt.setString(2, adminIdNo);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.err.println("Error updating password: " + e.getMessage());
        }
    }

    /**
     * Maps a row from the `ResultSet` to an `Admin` object.
     *
     * @param rs The `ResultSet` containing the admin data.
     * @return An `Admin` object.
     * @throws SQLException If a database access error occurs.
     */
    private Admin mapRowToAdmin(ResultSet rs) throws SQLException {
        return new Admin(
                rs.getInt("admin_id"),
                rs.getString("adminId_No"),
                rs.getString("username"),
                rs.getString("password_hash"),
                rs.getString("first_name"),
                rs.getString("middle_name"),
                rs.getString("last_name"),
                rs.getString("sex"),
                rs.getDate("date_of_birth"),
                rs.getString("email"),
                rs.getString("phone_number"),
                rs.getString("address"),
                rs.getInt("role_id"),
                rs.getTimestamp("last_login"),
                rs.getTimestamp("created_at"),
                rs.getTimestamp("updated_at")
        );
    }
}
